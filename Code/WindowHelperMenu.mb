'*******************************************************************************
'**   Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************
' 1.2.0  	21-08-2009 19:50:48 - Support for moving windows into the active area of Pro
' 1.2.1  	31-08-2009 13:37:22 - Checking if a window is valid before applying the settings
' 1.3.0	09-10-2009 14:52:29 - Moved strings into .NET Resource file
' 1.3.1	28-10-2009 09:43:46	- Support for multiple screen resolutions when storing window position and sizes
'						- Support for automatically opening the layer control when the application starts
' 1.3.2	06-11-2009 20:16:56	- Better handling a closed MapBasic window: the window is now set and then closed on startup
' 1.3.3	23-11-2009 21:49:56	- Added support for help file
'						- Changed the look of the Aboutbox
'						- Added Alt shortcuts to the menu items
' 1.3.4	25-11-2009 14:18:31	- Changed a few strings
' 1.3.5	25-11-2009 20:18:00	- Added support for cloning any window type
' 1.5.0	13-01-2010 21:13:46	- Now the user can :
'							- specify to store window positions on exit
'							- specify to restore window positions on startup
'							- store window positions manually
'							- restore window positions manually
' 1.5.1	26-01-2010 20:08:07	- Moved strings to .NET Resource
' 1.5.5	31-03-2010 13:46:59	- Working on support for base map size and positions
'		20-04-2010 08:01:57	- Disabled saving of file and workspace (was ther for debug reason) when closing a window
'						- Saving an active window to a workspace without Open Table statements...
'							- usable for Layout templates
'							- the workspace still refers to names of windows
'						- Special windows are no longer locked by the autolock feature
'						- The window name is now put into {} to better handle ","'s in the name
' 1.5.6	19-08-2010 09:01:56	- Now supports dockíng add in MI Pro 10.5
' 1.5.7	24-03-2011 22:26:43	- WindowHelper dialog has been created as a dockable Window
'							- has a treeview with all window types
'							- the treewiew is updated whenever there s a change in the windows in Mi Pro
'							- WinFocusChangedHandler, WinClosedHandler
' 1.5.8	25-03-2011 21:01:01	- WindowHelper dialog has been improved, it is not more stable
'							- the Closed Window tab now shows the windows that has been closed during the current session
'							- they can be restored
' 1.5.9	25-03-2011 22:32:15	- Fixed the startup bug when no windows where open
' 1.5.10	08-04-2011 21:30:22	- You can now make any window (maps, browser and all special windows etc) dockable
'						- The Autolock feature now works in the WindowHelper dialog
'						- The WindowHelper toolbar has been removed as all features have been added to the WindowHelper dialog
'						- Special windows dockable position are stored on close down - but the special windows are not automatically made dockable on startup
' 1.5.11	09-04-2011 23:20:00	- Better management of closing and opening windows
'						- The buttons now reflect which window is selected
'						- If you double click on a closed window it will be restored
' 1.5.12	12-04-2011 22:12:02	- Added missing Tooltips on Lock select window
'						- Added some extra checking on exit to prevent errors
' 1.5.13	13-04-2011 22:23:28	- Been trying to make the docked windows more stable when closed during a session
'						- The special windows will now open (as a normal or docked) when you double click on them in the list
'						- Cleaned up the Win32Window class - added a Window object to the class and moved some functions to the class
'						- The resource strings have been moved from the WinHelper.dll (now obsolete) to the WindowHelper.dll
' 1.5.14	14-04-2011 11:36:45	- Moved the GetScreenSize to the WindowHelper .NET project
' 1.5.15	03-05-2011 11:21:01	- Window names are now updated when the WinFocusChangedHandler is called (only for the window getting into focus)
' 1.5.16	03-05-2011 22:47:43	- If you double click on a window, you can  now change the name and the size fo the window in a new window
' 1.5.16	25-05-2011 14:28:26	- Removed the ability to open the layer control on start as this now is built into Mi Pro (since 10.5)
'						- Remove any menu items refering to base windows
'						- Recompiled the entire project due to an updated ConfigFileLib
'1.15.17	27-05-2011 14:36:42	- Only document windows are now added to the list of current windows
'1.15.18	03-06-2011 21:41:41	- Remove the print statement from the interopHelper.Do method
'-------------------------------------------------------------------------------
'2.0.1	16-06-2012 22:40:20	- Added "Locate file in Explorer" to Layer Control (Layers) and TableList rightclick menus
'						- Added "Open file in Text Editor" to Layer Control (Layers) and TableList rightclick menus
'						- Added "Close Table" to Layer Control rightclick menu (Layers)
'						- Added "Set default view" to Layer Control rightclick menu (Maps)
'						- Added "Set default view" to Layer Control rightclick menu (Layers)
'						- Added "Zoom Entire Map" to Layer Control rightclick menu (Maps)
'						- Redesigned icons for the Window Helper windoe
'						- Added button for "Modify Window" to the Window Helper window
'						- Added OKButton the the Modify Window dialog
'2.0.2	03-08-2012 12:28:10	- Added support for zoom previous, zoon next, zoom first and zoom last to the WindowHelper window
'						- Added rightclick menu item for cloning a layout window
'						- Now the WindowHelper window shows the name of the currently active window
'						- The WindowHelper window now uses the active window when a button is pushed
'2.0.3	07-08-2012 09:39:18	- Initiates correctly if no windows are open
'						- The Zoom Next/Previous now handles the standard Zoom Previous View correctly
'2.0.4	09-08-2012 08:26:19	- Renamed a number of menu items
'2.0.5	10-08-2012 14:30:37	- Made the tooltips visible in the WindowHelper window again
'2.0.6	27-09-2012 10:29:11	- Added a space before the name of the Text Editor in the "Open in Text Editor" menu items
'2.0.7	28-11-2012 12:57:02	- Final version, releasing it now
'							- moved all strings from the c# code into the resources
'							- improved handling of the size of the window after autohide
'2.0.8	06-12-2012 07:47:23	- Added the ability to open Layer Control and TableList windows on startup
'						- Fixed an issue where storing the window positions didn't save the stored positions to the config file
'2.0.9	13-12-2012 08:34:34	- Added missing call to GetResStr around a few strings in the TableHelper module
'2.0.10	30-01-2013 09:00:30	- The Handlers did at certain occasions send a value of 145 which doesn't refer to any windows in Mi Pro.
'						- these low values are now ignored in the Controller module (.NET)
'2.0.11	12-03-2013 20:51:25	- Close table from the Layer Control crashes the tools when used on a thematic layer.
'							Has been changed to handle the cosmmetic layer and a cosmetic layer differently.
'							- Cosmetic layer is ignored.
'							- Thematic layer is removed from the map window
'*******************************************************************************

'-------------------------------------
Include "Library\MapBasic.def"
Include "Library\Icons.def"
Include "Library\Menu.def"
'**default constants...
Include "Library\Defaults.def"

Define xProgram 		"WindowHelper"
Define xProgramMenu		"W&indowHelper"
Define xToolbarName		"WindowHelper"
Define xVersion 		"2.0.11"
Define xYear			"2013"
Define xAddToMenuBar	FALSE

Define FILE_INI			GetFolderPath$(FOLDER_MI_PREFERENCE) & xProgram & ".ini"
Define FILE_DBG			ApplicationDirectory$() & xProgram & ".dbg"
Define FILE_ICONS_DLL		ApplicationDirectory$() + "WinHelperIcons.DLL"
Define FILE_PAD			GetFolderPath$(FOLDER_MI_PREFERENCE) & xProgram & ".btp"
Define FILE_HLP			ApplicationDirectory$() + "WindowHelper.pdf"

Declare Sub MENUSaveWindowToWorkspace

'-------------------------------------
Include "Library\ProgramInfo.def"
Include "Library\DEBUGLib.def"
Include "Library\CONFIGFILELib.def"
Include "Library\ERRORLib.def"
Include "Library\STRINGLib.def"
Include "Library\SYSTEMLib.def"
Include "Library\TABLELib.def"
Include "Library\TOOLBARLib.def"

Include "BaseWindows.def"
Include "TableHelper.def"
Include "WindowHelper.def"
Include "WindowPosition.def"
Include "WindowShow.def"
Include "WindowHelperDialog.def"

Include "Resources.def"

'-----------------------------------------------------------------------------------------
Declare Sub Main
Declare Sub EndProgram

Declare Sub Endhandler
Declare Sub WinClosedHandler
Declare Sub WinFocusChangedHandler
Declare Sub WinChangedHandler

Declare Sub MENUInitializeMenuItems

Declare Sub MENUToggleOpenLCOnStartup
Declare Sub MENUToggleOpenTLOnStartup
Declare Sub MENUToggleStoreWindowsOnExit
Declare Sub MENUToggleRestoreWindowsOnStartup
Declare Sub MENUStoreWindows
Declare Sub MENURestoreWindows

Declare Sub MENUReadIniFile
Declare Sub MENUWriteIniFile

Dim	mbOpenLCOnStartup, mbOpenTLOnStartup, mbRestoreWindowsOnStartup, mbStoreWindowsOnExit As Logical
'**********************************************************************************************''
'**   Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'
'**********************************************************************************************''
Sub Main

Dim	sToolbar, sTextEditorExe, sTextEditor As String

OnError GoTo ErrorOccured

	'***Initializing ApplicationInfo
	Call PRGISetApplicationName(xProgram)
	Call PRGISetApplicationVersion(xVersion)
	Call PRGISetApplicationCopyrightYear(xYear)
	Call PRGISetApplicationHelpFile(FILE_HLP)

	'***Enabling Debug if file exists
	Call DEBUGEnableByFile(FILE_DBG)
	Call DEBUGPrint("----------------------------------------------------------------------------------------------")
	Call DEBUGPrint("Application " & xProgram & " " & xVersion & " started")

	'***Initializing BaseWindows module
	Call BWINSetIniFile(FILE_INI)

	'***Reading configuration file
	Call MENUReadIniFile

	'**Opening Layer Control and/or TableList on startup
	If mbOpenLCOnStartup Then
		Call DEBUGPrint("Opening Layer Control Window")
		Run Menu Command M_MAP_LAYER_CONTROL	'Layer Control window
	End If
	If mbOpenTLOnStartup Then
		Call DEBUGPrint("Opening TableList Window")
		Run Menu Command 1738				'Table List window
	End If

	'**Restoring special windows on startup
	If mbRestoreWindowsOnStartup Then
		Call DEBUGPrint("Restoring window positions (Calling WINPRestoreWindowPosition)")
		Call WINPAutoRestoreWindowPosition
	End If

	Create Menu GetResItemStr("MNU_SHOW_WINDOW") As
		GetResItemStr("MNU_SHOW_INFO_WINDOW")
			Calling WSHWShowInfoWindow,
		GetResItemStr("MNU_SHOW_MAPBASIC_WINDOW")
			Calling WSHWShowMapBasicWindow,
		GetResItemStr("MNU_SHOW_MESSAGE_WINDOW")
			Calling WSHWShowMessageWindow,
		GetResItemStr("MNU_SHOW_STATISTICS_WINDOW")
			Calling WSHWShowStatisticsWindow,
		GetResItemStr("MNU_SHOW_LEGEND_WINDOW")
			Calling WSHWShowLegendWindow,
		GetResItemStr("MNU_SHOW_RULER_WINDOW")
			Calling WSHWShowRulerWindow,
		"(-",
		GetResItemStr("MNU_SHOW_ALL_WINDOWS")
			Calling WSHWShowAllWindows

	Create Menu xProgramMenu As
		GetResItemStr("MNU_SAVE_WINDOW_TO_WOR")							'"Save window to workspace without 'Open table ...' statements"
			HelpMsg GetResItemStr("MNU_HLP_SAVE_WINDOW_TO_WOR")			'"Saves the active window to a workspace without the 'Open Table ...' statements"
			Calling MENUSaveWindowToWorkspace,
		"(-",
		GetResItemStr("MNU_SHOW_WINDOW") As GetResItemStr("MNU_SHOW_WINDOW"),
		GetResItemStr("MNU_RESTORE_WINDOWS_NOW")						'"Restore window positions now"
			HelpMsg GetResItemStr("MNU_HLP_RESTORE_WINDOWS_NOW")			'"Restore window positions to the saved state"
			Calling MENURestoreWindows,
		GetResItemStr("MNU_STORE_WINDOWS_NOW")							'"Store window positions now"
			HelpMsg GetResItemStr("MNU_HLP_STORE_WINDOWS_NOW")			'"Store the current position of the windows"
			Calling MENUStoreWindows,
		"(-",
		"!" & GetResItemStr("MNU_TOGGLE_SHOW_LAYER_CONTROL")				'"Show Layer Control on startup"
			HelpMsg GetResItemStr("MNU_HLP_TOGGLE_SHOW_LAYER_CONTROL")		'"Open the Layer Control window when the program starts"
			Calling MENUToggleOpenLCOnStartup,
		"!" & GetResItemStr("MNU_TOGGLE_SHOW_TABLE_LIST")					'"Show TableList on startup"
			HelpMsg GetResItemStr("MNU_HLP_TOGGLE_SHOW_TABLE_LIST")		'"Open the TableList window when the program starts"
			Calling MENUToggleOpenTLOnStartup,
		"!" & GetResItemStr("MNU_TOGGLE_RESTORE_WINDOWS_ON_START")			'"Restore window positions on startup"
			HelpMsg GetResItemStr("MNU_HLP_TOGGLE_RESTORE_WINDOWS_ON_START")	'"Restore window positions when the program starts"
			Calling MENUToggleRestoreWindowsOnStartup,
		"!" & GetResItemStr("MNU_TOGGLE_STORE_WINDOWS_ON_EXIT")			'"Store window positions on exit"
			HelpMsg GetResItemStr("MNU_HLP_TOGGLE_STORE_WINDOWS_ON_EXIT")	'"Store window positions when the program ends"
			Calling MENUToggleStoreWindowsOnExit,
		"(-",
		GetResItemStrReplace("MNU_ABOUT_PROGRAM_X", xProgram )
			Calling PRGIAboutbox,
		GetResItemStr("MNU_HELP")
			Calling PRGILaunchHelpFile,
		GetResItemStr("MNU_END_PROGRAM")
			Calling EndProgram

	'**Adding menu item to the Layout window rightclick menu
	Alter Menu ID M_SHORTCUT_LAYOUT add
		GetResItemStr("MNU_LAYOUT_CLONE_VIEW")							'"Clone view"
			HelpMsg GetResItemStr("MNU_HLP_LAYOUT_CLONE_VIEW")			'"Display a clone of the active layout"
			Calling WINHCloneWindowMenu

	'**Adding menu item to the LayerControl window rightclick menu for maps
	Alter Menu ID M_SHORTCUT_LC_MAPS Add
		"(-",
		GetResItemStr("MNU_SET_DEFAULT_VIEW_ALL_LAYERS")
			HelpMsg GetResItemStr("MNU_HLP_SET_DEFAULT_VIEW_ALL_LAYERS")
			Calling WINHSetDefaultViewAllLayers,
		GetResItemStr("MNU_VIEW_ENTIRE_MAP")					'"Zoom Entire Map"
			HelpMsg GetResItemStr("MNU_HLP_VIEW_ENTIRE_MAP")		'"Zooms to entire view in the map"
			Calling WINHZoomEntireAllLayers

	'**Adding menu item to the TableList window rightclick menu for tables
	Alter Menu ID M_SHORTCUT_TLV_TABLES Add
		"(-",
		GetResItemStr("MNU_LOCATE_FILE_IN_EXPLORER")					'"Locate file in Explorer"
			HelpMsg GetResItemStr("MNU_HLP_LOCATE_FILE_IN_EXPLORER")	'"Finds a file in Windows Explorer related to the selected table"
			Calling TABHLocateTabFileTL

	'**Adding menu item to the LayerControl window rightclick menu for layers
	Alter Menu ID M_SHORTCUT_LC_LAYERS Add
		"(-",
		GetResItemStr("MNU_CLOSE_TABLE")	'"Close table"
			HelpMsg GetResItemStr("MNU_HLP_CLOSE_TABLE")	'"Closes the selected table"
			Calling TABHCloseTableLC,
		"(-",
		GetResItemStr("MNU_SET_DEFAULT_VIEW_SINGLE_LAYER")
			HelpMsg GetResItemStr("MNU_HLP_SET_DEFAULT_VIEW_SINGLE_LAYER")
			Calling WINHSetDefaultViewSingleLayer,
		GetResItemStr("MNU_LOCATE_FILE_IN_EXPLORER")		'"Locate file in Explorer"
			HelpMsg GetResItemStr("MNU_HLP_LOCATE_FILE_IN_EXPLORER")	'"Finds a file in Windows Explorer related to the selected layer"
			Calling TABHLocateTabFileLC

	sTextEditorExe	= SYSFindTextEditor()
	If sTextEditorExe <> "" Then
		sTextEditor 	= PathToFileName$(sTextEditorExe)
		sTextEditor 	= Left$(sTextEditor, Len(sTextEditor) - 4)

		Call TABHSetTextEditor(sTextEditorExe)

		'**Adding menu item to the TableList window rightclick menu for tables
		Alter Menu ID M_SHORTCUT_TLV_TABLES Add
			GetResItemStr("MNU_OPEN_TABFILE_IN_TEXT_EDITOR") & " " & sTextEditor					'"Open tab file in " + sTextEditor
				HelpMsg GetResItemStr("MNU_HLP_OPEN_TABFILE_IN_TEXT_EDITOR") & " " & sTextEditor	'"Open the selected tab file in " + sTextEditor
				Calling TABHOpenTabFileTL

		'**Adding menu item to the LayerControl window rightclick menu for layers
		Alter Menu ID M_SHORTCUT_LC_LAYERS Add
			GetResItemStr("MNU_OPEN_TABFILE_IN_TEXT_EDITOR") & " " & sTextEditor					'"Open tab file in " + sTextEditor
				HelpMsg GetResItemStr("MNU_HLP_OPEN_TABFILE_IN_TEXT_EDITOR") & " " & sTextEditor	'"Open the selected tab file in " + sTextEditor
				Calling TABHOpenTabFileLC
	End If

	If xAddToMenuBar Then
		'Remove the Window menu and Help menu
		Alter Menu Bar Remove ID 6, ID 7
		'Add the custom menu, then the Window & Help menus
		Alter Menu Bar Add xProgramMenu, ID 6, ID 7
	Else
		'**Adding the menu to the Tools menu
		Alter Menu ID 4
			Add xProgramMenu As xProgramMenu
	End If

	'**Disabling restoring windows until a window has been closed
'	Alter Menu Item WINHRestoreWindowMenu Disable
'	Alter Button WINHRestoreWindowMenu Disable

	Call MENUInitializeMenuItems

	Call WHDInitialize

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "Main")
	Call ERRShow()
	Resume Next

End Sub

'****************************************
'**   Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'**   Ending MapBasic application
'****************************************
Sub EndProgram

OnError GoTo ErrorOccured

	End Program
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "EndProgram")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub Endhandler

OnError GoTo ErrorOccured

	If mbStoreWindowsOnExit Then
		Call DEBUGPrint("Storing window positions (Calling WINP_EndHandler)")
		Call WINP_EndHandler
	End If

	Call MENUWriteIniFile

	Call WHDEndHandler

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "Endhandler")
	Call ERRShow()

End Sub


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub WinClosedHandler

Dim	nWID As Integer

OnError GoTo ErrorOccured

	Set Event Processing Off
	Set Handler WinClosedHandler Off

	nWID = CommandInfo(CMD_INFO_WIN)
	'Call WINHWinClosedHandler(nWID)
	Call WHDWinClosedHandler(nWID)

	Set Handler WinClosedHandler On
	Set Event Processing On

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "WinClosedHandler")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub WinFocusChangedHandler

Dim	nWID As Integer

OnError GoTo ErrorOccured

	Set Event Processing Off
	Set Handler WinFocusChangedHandler Off

	nWID = CommandInfo(CMD_INFO_WIN)
'	Call WINHWinFocusChangedHandler(nWID)
	Call WHDWinFocusChangedHandler(nWID)

	Set Handler WinFocusChangedHandler On
	Set Event Processing On

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "WinFocusChangedHandler")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'
'**********************************************************************************************''
Sub WinChangedHandler

Dim	nWID As Integer

OnError GoTo ErrorOccured

	Set Event Processing Off
	Set Handler WinFocusChangedHandler Off

	nWID = CommandInfo(CMD_INFO_WIN)
	Call WHDWinChangedHandler(nWID)

	Set Handler WinFocusChangedHandler On
	Set Event Processing On

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "WinChangedHandler")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub MENUInitializeMenuItems

OnError GoTo ErrorOccured

	If mbOpenLCOnStartup Then
		Alter Menu Item MENUToggleOpenLCOnStartup Check
	Else
		Alter Menu Item MENUToggleOpenLCOnStartup Uncheck
	End If
	If mbOpenTLOnStartup Then
		Alter Menu Item MENUToggleOpenTLOnStartup Check
	Else
		Alter Menu Item MENUToggleOpenTLOnStartup Uncheck
	End If

	If mbStoreWindowsOnExit Then
		Alter Menu Item MENUToggleStoreWindowsOnExit Check
	Else
		Alter Menu Item MENUToggleStoreWindowsOnExit Uncheck
	End If

	If mbRestoreWindowsOnStartup Then
		Alter Menu Item MENUToggleRestoreWindowsOnStartup Check
	Else
		Alter Menu Item MENUToggleRestoreWindowsOnStartup Uncheck
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUInitializeMenuItems")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub MENUToggleStoreWindowsOnExit

OnError GoTo ErrorOccured

	If mbStoreWindowsOnExit Then
		Call DEBUGPrint("Unchecking 'Store windows on Exit'")
		Alter Menu Item MENUToggleStoreWindowsOnExit Uncheck
		mbStoreWindowsOnExit = FALSE
	Else
		Call DEBUGPrint("Checking 'Store windows on Exit'")
		Alter Menu Item MENUToggleStoreWindowsOnExit Check
		mbStoreWindowsOnExit = TRUE
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUToggleStoreWindowsOnExit")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub MENUToggleOpenLCOnStartup

OnError GoTo ErrorOccured

	If mbOpenLCOnStartup Then
		Call DEBUGPrint("Unchecking 'Open Layer Control window on startup'")
		Alter Menu Item MENUToggleOpenLCOnStartup Uncheck
		mbOpenLCOnStartup = FALSE
	Else
		Call DEBUGPrint("Checking 'Open Layer Control window on startup'")
		Alter Menu Item MENUToggleOpenLCOnStartup Check
		mbOpenLCOnStartup = TRUE
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUToggleOpenLCOnStartup")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub MENUToggleOpenTLOnStartup

OnError GoTo ErrorOccured

	If mbOpenTLOnStartup Then
		Call DEBUGPrint("Unchecking 'Open TableList window on startup'")
		Alter Menu Item MENUToggleOpenTLOnStartup Uncheck
		mbOpenTLOnStartup = FALSE
	Else
		Call DEBUGPrint("Checking 'Open TableList window on startup'")
		Alter Menu Item MENUToggleOpenTLOnStartup Check
		mbOpenTLOnStartup = TRUE
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUToggleOpenTLOnStartup")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub MENUToggleRestoreWindowsOnStartup

OnError GoTo ErrorOccured

	If mbRestoreWindowsOnStartup Then
		Call DEBUGPrint("Unchecking 'Restore windows on startup'")
		Alter Menu Item MENUToggleRestoreWindowsOnStartup Uncheck
		mbRestoreWindowsOnStartup = FALSE
	Else
		Call DEBUGPrint("Checking 'Restore windows on startup'")
		Alter Menu Item MENUToggleRestoreWindowsOnStartup Check
		mbRestoreWindowsOnStartup = TRUE
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUToggleRestoreWindowsOnStartup")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub MENUStoreWindows

OnError GoTo ErrorOccured

	Call DEBUGPrint("Storing window positions (Calling WINPStoreWindowPosition)")
	Call WINPStoreWindowPosition

	Call DEBUGPrint("Writing config file (Calling WINPWriteIniFile)")
	Call WINPWriteIniFile(FILE_INI)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUStoreWindows")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub MENURestoreWindows

OnError GoTo ErrorOccured

	Call DEBUGPrint("Restoring window positions (Calling WINPRestoreWindowPosition)")
	Call WINPRestoreWindowPosition
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENURestoreWindows")
	Call ERRShow()

End Sub


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub MENUReadIniFile

OnError GoTo ErrorOccured

'	Call WINHSetAutolockWindows((CONFIGReadKey(FILE_INI, "WINDOWHELPER", "AUTOLOCK") = "1"))

	mbOpenLCOnStartup 			= NOT (CONFIGReadKey(FILE_INI, "WINDOWHELPER", "SHOWLAYERCONTROL") = "0")
	mbOpenTLOnStartup			= NOT (CONFIGReadKey(FILE_INI, "WINDOWHELPER", "SHOWTABLELIST") = "0")
	mbRestoreWindowsOnStartup	= NOT (CONFIGReadKey(FILE_INI, "WINDOWHELPER", "RESTOREWINDOWS") = "0")
	mbStoreWindowsOnExit		= NOT (CONFIGReadKey(FILE_INI, "WINDOWHELPER", "STOREWINDOWS") = "0")

	Call WINPReadIniFile(FILE_INI)
	Call BWINReadIniFile(FILE_INI)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUReadIniFile")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub MENUWriteIniFile

OnError GoTo ErrorOccured

'	If WINHAutolockWindows() Then
'		Call CONFIGWriteKey(FILE_INI, "WINDOWHELPER", "AUTOLOCK", "1")
'	Else
'		Call CONFIGWriteKey(FILE_INI, "WINDOWHELPER", "AUTOLOCK", "0")
'	End If

	If mbOpenLCOnStartup Then
		Call CONFIGWriteKey(FILE_INI, "WINDOWHELPER", "SHOWLAYERCONTROL", "1")
	Else
		Call CONFIGWriteKey(FILE_INI, "WINDOWHELPER", "SHOWLAYERCONTROL", "0")
	End If

	If mbOpenTLOnStartup Then
		Call CONFIGWriteKey(FILE_INI, "WINDOWHELPER", "SHOWTABLELIST", "1")
	Else
		Call CONFIGWriteKey(FILE_INI, "WINDOWHELPER", "SHOWTABLELIST", "0")
	End If

	If mbStoreWindowsOnExit Then
		Call CONFIGWriteKey(FILE_INI, "WINDOWHELPER", "STOREWINDOWS", "1")
	Else
		Call CONFIGWriteKey(FILE_INI, "WINDOWHELPER", "STOREWINDOWS", "0")
	End If

	If mbRestoreWindowsOnStartup Then
		Call CONFIGWriteKey(FILE_INI, "WINDOWHELPER", "RESTOREWINDOWS", "1")
	Else
		Call CONFIGWriteKey(FILE_INI, "WINDOWHELPER", "RESTOREWINDOWS", "0")
	End If

	Call WINPWriteIniFile(FILE_INI)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUWriteIniFile")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub MENUSaveWindowToWorkspace

Dim	sFile, sName As String,
	nWID As Integer

	nWID = FrontWindow()
	If nWID = 0 Then
		Note GetResItemStr("ERR_OPEN_WINDOW_TO_SAVE_TO_WOR")		'"Please open a window to save to a workspace!"
		Exit Sub
	End If

	sName	= STRINGReplace(WindowInfo(nWID, WIN_INFO_NAME), ":", " ")
	sFile	= FileSaveAsDlg("", sName, "WOR", GetResItemStr("PICK_WOR_TO_SAVE_WINDOW_TO"))		'"Select workspace to save window to..."
	If sFile = "" Then
		Exit Sub
	End If

	If FileExists(sFile) Then
		Kill sFile
	End If

	Open File sFile
		For Output
		As #876
		CharSet SystemInfo(SYS_INFO_CHARSET)

	Print #876, "!Workspace"
	Print #876, "!Version " & SystemInfo(SYS_INFO_MIVERSION)
	Print #876, "!Charset " & SystemInfo(SYS_INFO_CHARSET)
	Print #876, WindowInfo(nWID, WIN_INFO_CLONEWINDOW)

	Close File #876

End Sub
